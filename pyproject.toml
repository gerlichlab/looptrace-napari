[project]
name = "looptrace-napari"
dynamic = ["version"]
requires-python = ">= 3.10"
authors = [
    {name = "Vince Reuter"}
]
description = "This project facilitates viewing various `looptrace` outputs in `napari`"
readme = "README.md"
license = {file = "LICENSE"}
keywords = ["visualisation", "bioinformatics", "chromatin", "napari", "FISH"]
classifiers = [
    "Development Status :: 1 - Planning",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Typing :: Typed",
]
dependencies = [
    "napari >= 0.4.19; sys_platform == 'darwin'",
    "napari[all] >= 0.4.19; sys_platform != 'darwin'",
    "numpy",
    "numpydoc_decorator >= 2.2.0",
    "pandas",
    "pyqt6 >= 6.5.0; sys_platform == 'darwin'",
    "pytest",
    "zarr >= 2.4.12",
]

[project.urls]
Homepage = "https://github.com/gerlichlab/looptrace-napari"
Repository = "https://github.com/gerlichlab/looptrace-napari.git"
Issues = "https://github.com/gerlichlab/looptrace-napari/issues"

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.package-data]
looptrace_napari = [ "napari.yaml" ]

[tool.setuptools.dynamic]
version = { attr = "looptrace_napari.__version__" }

[project.entry-points."napari.manifest"]
looptrace-napari = "looptrace_napari:napari.yaml"

[project.optional-dependencies]
formatting = [
    "black[colorama] >= 24.1",
    "codespell >= 2.2.4",
    "isort >= 5.10",
]
linting = [
    "mypy >= 1.0.1",
    "pandas-stubs",
    "pylint >= 3",
]
testsuite = [
    "pytest >= 7.1.0",
    "pytest-cov",
]
testall = [
    "looptrace-napari[formatting]",
    "looptrace-napari[linting]",
    "looptrace-napari[testsuite]",
]

[tool.black]
enable-unstable-feature = [
    "string_processing", # split long formatted strings
]
preview = true

[tool.codespell]
skip = ".git,.mypy_cache,.nox,.vscode,__pycache__,poetry.lock"
builtin = "clear,rare,informal,usage,code,names"
ignore-words-list = "jupyter,iff"  # prevent jupyter -> jupiter, iff -> if
check-filenames = true
uri-ignore-words-list = "*"

[tool.isort]
profile = "black"

[tool.pylint]
# Disable missing docstrings since in general they're handled by numpydoc_decorator's @doc.
"messages control".disable = "fixme,missing-class-docstring,missing-function-docstring,too-many-branches,unspecified-encoding,use-dict-literal"

